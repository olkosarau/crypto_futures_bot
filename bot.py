import os, asyncio, logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from data import fetch_klines
from strategies import generate_signal_from_dfs
from exchange import place_market_order, close_position_order  # –î–æ–±–∞–≤–ª—è–µ–º close_position_order
from db import init_db, log_trade, log_signal, open_position, close_position, get_open_positions, get_portfolio_summary  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from reports import generate_weekly_report
from market_scanner import scanner
from portfolio_manager import update_portfolio_prices  # –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
from fastapi import FastAPI, Request
import uvicorn
import threading
import httpx
from dotenv import load_dotenv
from web_interface import web_app, notify_websocket_clients

load_dotenv()
app = web_app
web_app_url = "https://olkosarau.github.io/crypto_futures_bot/"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
SIGNAL_INTERVAL = int(os.getenv('SIGNAL_CHECK_INTERVAL_SEC', '300'))
SUBSCRIBE_SYMBOLS = os.getenv('SUBSCRIBE_SYMBOLS', 'BTCUSDT,ETHUSDT').split(',')

if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN not found in environment variables")
    exit(1)

if not CHAT_ID:
    logger.error("TELEGRAM_CHAT_ID not found in environment variables")
    exit(1)

logger.info(f"Bot initialized for chat: {CHAT_ID}")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()


keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å WEB", web_app=WebAppInfo(url=web_app_url))]
    ],
    resize_keyboard=True
)

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫")],
            [KeyboardButton(text="üìà –û—Ç—á–µ—Ç"), KeyboardButton(text="üíº –¢–æ—Ä–≥–æ–≤–ª—è")],
            [KeyboardButton(text="‚úÖ –í–∫–ª —Å–∏–≥–Ω–∞–ª—ã"), KeyboardButton(text="‚ùå –í—ã–∫–ª —Å–∏–≥–Ω–∞–ª—ã")],
            [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
            [KeyboardButton(
                text="üåê –î–∞—à–±–æ—Ä–¥ WEB",
                web_app=WebAppInfo(url=web_app_url)
            )]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )
    return keyboard


def get_trading_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìà LONG"), KeyboardButton(text="üìâ SHORT")],
            [KeyboardButton(text="üîí CLOSE"), KeyboardButton(text="üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    return keyboard


@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å WEB", web_app=WebAppInfo(url=web_app_url))]
        ]
    )
    await message.answer(
        "ü§ñ <b>–¢–æ—Ä–≥–æ–≤—ã–π –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ –∏ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã.\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /help - –ø–æ–º–æ—â—å\n"
        "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "‚Ä¢ /signals - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã\n"
        "‚Ä¢ /scan - –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞\n"
        "‚Ä¢ /report - –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç\n"
        "‚Ä¢ /long SYMBOL QTY - –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–Ω–≥\n"
        "‚Ä¢ /short SYMBOL QTY - –æ—Ç–∫—Ä—ã—Ç—å —à–æ—Ä—Ç\n"
        "‚Ä¢ /close SYMBOL - –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é",
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )


@dp.message(Command('help'))
async def cmd_help(message: types.Message):
    await message.answer(
        "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º</b>\n\n"

        "<b>ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è:</b>\n"
        "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –∏ –∏—â–µ—Ç —Å–∏–≥–Ω–∞–ª—ã\n"
        "‚Ä¢ –°–∏–≥–Ω–∞–ª—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ '–í–∫–ª/–í—ã–∫–ª —Å–∏–≥–Ω–∞–ª—ã' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"

        "<b>üíº –†—É—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è:</b>\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–¢–æ—Ä–≥–æ–≤–ª—è' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä—É—á–Ω—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º\n"
        "‚Ä¢ <code>/long SYMBOL QTY</code> - –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—é\n"
        "‚Ä¢ <code>/short SYMBOL QTY</code> - –æ—Ç–∫—Ä—ã—Ç—å —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏—é\n"
        "‚Ä¢ <code>/close SYMBOL</code> - –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é\n\n"

        "<b>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã:</b>\n"
        "‚Ä¢ <code>/signals</code> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã —Å–µ–π—á–∞—Å\n"
        "‚Ä¢ <code>/scan</code> - –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞\n"
        "‚Ä¢ <code>/report</code> - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç\n"
        "‚Ä¢ <code>/status</code> - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"

        "<b>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ <code>/signals_on</code> - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã\n"
        "‚Ä¢ <code>/signals_off</code> - –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã\n\n"

        "<i>–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–¢–æ—Ä–≥–æ–≤–ª—è'</i>",
        parse_mode='HTML'
    )


@dp.message(Command('status'))
async def cmd_status(message: types.Message):
    status_text = (
        "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n"
        f"‚Ä¢ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> {', '.join(SUBSCRIBE_SYMBOLS)}\n"
        f"‚Ä¢ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {SIGNAL_INTERVAL} —Å–µ–∫\n"
        f"‚Ä¢ <b>–ê–≤—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã:</b> {'‚úÖ –í–ö–õ' if scheduler.running else '‚ùå –í–´–ö–õ'}\n"
        f"‚Ä¢ <b>–†–µ–∂–∏–º:</b> {'üü¢ –†–ï–ê–õ–¨–ù–´–ô' if not os.getenv('DRY_RUN', 'true').lower() == 'true' else 'üü° –¢–ï–°–¢–û–í–´–ô'}\n"
        f"‚Ä¢ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if os.path.exists('data/bot.db') else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
        "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>"
    )
    await message.answer(status_text, parse_mode='HTML')


@dp.message(Command('signals'))
async def cmd_signals_now(message: types.Message):
    await message.answer("üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤...")
    await check_signals(notify_user=message.chat.id)


@dp.message(Command('scan'))
async def cmd_scan(message: types.Message):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å —Ä—ã–Ω–æ–∫ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã"""
    await message.answer("üîç –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞...")
    await check_signals(notify_user=message.chat.id)


@dp.message(Command('weekly_report'))
async def cmd_weekly(message: types.Message):
    try:
        await message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
        await bot.send_chat_action(message.chat.id, "typing")

        path = generate_weekly_report()

        if path and os.path.exists(path):
            file_size = os.path.getsize(path) / 1024  # –†–∞–∑–º–µ—Ä –≤ KB
            logger.info(f"Report file size: {file_size:.1f} KB")

            if file_size > 0:
                await bot.send_document(
                    message.chat.id,
                    types.FSInputFile(path),
                    caption="üìà –í–∞—à –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"
                )
                await message.answer("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                try:
                    os.remove(path)
                except:
                    pass
            else:
                await message.answer("‚ùå –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")

    except Exception as e:
        logger.error(f"Report generation error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")


@dp.message(Command('signals_on'))
async def cmd_signals_on(message: types.Message):
    if not scheduler.running:
        scheduler.start()
    scheduler.resume()
    await message.answer("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã")


@dp.message(Command('signals_off'))
async def cmd_signals_off(message: types.Message):
    scheduler.pause()
    await message.answer("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –≤—ã–∫–ª—é—á–µ–Ω—ã")


@dp.message(Command('long', 'short'))
async def manual_trade(message: types.Message):
    try:
        parts = message.text.split()
        cmd = parts[0].lstrip('/').lower()

        if len(parts) < 3:
            await message.answer(
                f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/{cmd} SYMBOL QTY</code>\n"
                f"–ü—Ä–∏–º–µ—Ä: <code>/{cmd} BTCUSDT 0.01</code>\n\n"
                f"<i>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: BTCUSDT, ETHUSDT, SOLUSDT, XRPUSDT, ADAUSDT, AVAXUSDT, DOTUSDT, LINKUSDT, MATICUSDT</i>",
                parse_mode='HTML'
            )
            return

        symbol = parts[1].upper()
        valid_symbols = ['BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'XRPUSDT', 'ADAUSDT', 'AVAXUSDT', 'DOTUSDT', 'LINKUSDT',
                         'MATICUSDT']

        if symbol not in valid_symbols:
            await message.answer(
                f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª</b>\n\n"
                f"–°–∏–º–≤–æ–ª <code>{symbol}</code> –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(valid_symbols)}",
                parse_mode='HTML'
            )
            return

        try:
            amt = float(parts[2])
            if amt <= 0:
                await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.01)")
            return

        side = 'BUY' if cmd == 'long' else 'SELL'
        action = 'LONG' if cmd == 'long' else 'SHORT'
        emoji = "üìà" if cmd == 'long' else "üìâ"

        await message.answer(f"{emoji} –†–∞–∑–º–µ—â–∞—é –æ—Ä–¥–µ—Ä {action} –¥–ª—è {symbol}...")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
        await bot.send_chat_action(message.chat.id, "typing")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ø–æ–∑–∏—Ü–∏—é
        from data import fetch_klines
        try:
            df = await fetch_klines(symbol, '1m', limit=1)
            current_price = float(df.iloc[-1]['close']) if not df.empty else 0
        except:
            current_price = 0

        res = await place_market_order(symbol, side, amt)

        if res.success:
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            log_trade(symbol, side, amt, current_price)
            open_position(symbol, side, amt, current_price)

            await message.answer(
                f"‚úÖ <b>–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω!</b>\n\n"
                f"‚Ä¢ <b>–°–∏–º–≤–æ–ª:</b> {symbol}\n"
                f"‚Ä¢ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {action}\n"
                f"‚Ä¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {amt}\n"
                f"‚Ä¢ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {current_price:.4f}\n"
                f"‚Ä¢ <b>–¢–∏–ø:</b> MARKET\n"
                f"‚Ä¢ <b>–†–µ–∂–∏–º:</b> {'üü° –¢–ï–°–¢–û–í–´–ô' if os.getenv('DRY_RUN', 'true').lower() == 'true' else 'üü¢ –†–ï–ê–õ–¨–ù–´–ô'}\n\n"
                f"<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /close {symbol} –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏</i>",
                parse_mode='HTML'
            )

            logger.info(f"Manual {action} order: {symbol} {amt} at {current_price}")

        else:
            error_msg = res.info.get('error', 'Unknown error')
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞</b>\n\n"
                f"‚Ä¢ <b>–°–∏–º–≤–æ–ª:</b> {symbol}\n"
                f"‚Ä¢ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {action}\n"
                f"‚Ä¢ <b>–û—à–∏–±–∫–∞:</b> {error_msg}\n\n"
                f"<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</i>",
                parse_mode='HTML'
            )

    except Exception as e:
        logger.error(f"Trade error: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞</b>\n\n"
            f"<i>–î–µ—Ç–∞–ª–∏: {str(e)}</i>\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            f"‚Ä¢ –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n"
            f"‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞\n"
            f"‚Ä¢ –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞",
            parse_mode='HTML'
        )


@dp.message(Command('close'))
async def cmd_close(message: types.Message):
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/close SYMBOL</code>\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/close BTCUSDT</code>",
                parse_mode='HTML'
            )
            return

        symbol = parts[1].upper()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
        open_positions = get_open_positions()
        position_exists = any(pos['symbol'] == symbol for pos in open_positions)

        if not position_exists:
            await message.answer(
                f"‚ùå <b>–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
                f"–û—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è <code>{symbol}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                f"<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /long –∏–ª–∏ /short —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é</i>",
                parse_mode='HTML'
            )
            return

        await message.answer(f"üîí –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é {symbol}...")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
        await bot.send_chat_action(message.chat.id, "typing")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        res = await close_position_order(symbol)

        if res.success:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            close_position(symbol)

            await message.answer(
                f"‚úÖ <b>–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞!</b>\n\n"
                f"‚Ä¢ <b>–°–∏–º–≤–æ–ª:</b> {symbol}\n"
                f"‚Ä¢ <b>–°—Ç–∞—Ç—É—Å:</b> –ó–ê–ö–†–´–¢–û\n"
                f"‚Ä¢ <b>–†–µ–∂–∏–º:</b> {'üü° –¢–ï–°–¢–û–í–´–ô' if os.getenv('DRY_RUN', 'true').lower() == 'true' else 'üü¢ –†–ï–ê–õ–¨–ù–´–ô'}\n\n"
                f"<i>–ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞</i>",
                parse_mode='HTML'
            )

            logger.info(f"Closed position: {symbol}")

        else:
            error_msg = res.info.get('error', 'Unknown error')
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
                f"‚Ä¢ <b>–°–∏–º–≤–æ–ª:</b> {symbol}\n"
                f"‚Ä¢ <b>–û—à–∏–±–∫–∞:</b> {error_msg}",
                parse_mode='HTML'
            )

    except Exception as e:
        logger.error(f"Close position error: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
            f"<i>–î–µ—Ç–∞–ª–∏: {str(e)}</i>",
            parse_mode='HTML'
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(F.text == "üìä –°—Ç–∞—Ç—É—Å")
async def button_status(message: types.Message):
    await cmd_status(message)


@dp.message(F.text == "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫")
async def button_scan(message: types.Message):
    await cmd_scan(message)


@dp.message(F.text == "üìà –û—Ç—á–µ—Ç")
async def button_report(message: types.Message):
    await cmd_weekly(message)


@dp.message(F.text == "‚úÖ –í–∫–ª —Å–∏–≥–Ω–∞–ª—ã")
async def button_signals_on(message: types.Message):
    await cmd_signals_on(message)


@dp.message(F.text == "‚ùå –í—ã–∫–ª —Å–∏–≥–Ω–∞–ª—ã")
async def button_signals_off(message: types.Message):
    await cmd_signals_off(message)


@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def button_help(message: types.Message):
    await cmd_help(message)


@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def button_balance(message: types.Message):
    await message.answer("üíº –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def button_settings(message: types.Message):
    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:</b>\n\n"
        f"‚Ä¢ <b>–°–∏–º–≤–æ–ª—ã:</b> {', '.join(SUBSCRIBE_SYMBOLS)}\n"
        f"‚Ä¢ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {SIGNAL_INTERVAL} —Å–µ–∫\n"
        f"‚Ä¢ <b>–†–µ–∂–∏–º:</b> {'–†–ï–ê–õ–¨–ù–´–ô' if not os.getenv('DRY_RUN', 'true').lower() == 'true' else '–¢–ï–°–¢–û–í–´–ô'}\n\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env"
    )
    await message.answer(settings_text, parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
@dp.message(F.text == "üíº –¢–æ—Ä–≥–æ–≤–ª—è")
async def button_trading(message: types.Message):
    await message.answer(
        "üíº <b>–†–µ–∂–∏–º —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /long SYMBOL QTY - –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–Ω–≥\n"
        "‚Ä¢ /short SYMBOL QTY - –æ—Ç–∫—Ä—ã—Ç—å —à–æ—Ä—Ç\n"
        "‚Ä¢ /close SYMBOL - –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: /long BTCUSDT 0.01</i>",
        parse_mode='HTML',
        reply_markup=get_trading_keyboard()
    )


@dp.message(F.text == "üìà LONG")
async def button_long(message: types.Message):
    await message.answer(
        "üìà <b>–û—Ç–∫—Ä—ã—Ç–∏–µ LONG –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
        "–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è LONG –ø–æ–∑–∏—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/long SYMBOL QTY</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "<code>/long BTCUSDT 0.01</code>\n"
        "<code>/long ETHUSDT 0.1</code>\n"
        "<code>/long SOLUSDT 1.0</code>\n\n"
        "<i>–†–µ–∂–∏–º: üü° –¢–ï–°–¢–û–í–´–ô (–æ—Ä–¥–µ—Ä–∞ –Ω–µ –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ –±–∏—Ä–∂–µ)</i>",
        parse_mode='HTML'
    )


@dp.message(F.text == "üìâ SHORT")
async def button_short(message: types.Message):
    await message.answer(
        "üìâ <b>–û—Ç–∫—Ä—ã—Ç–∏–µ SHORT –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
        "–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è SHORT –ø–æ–∑–∏—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/short SYMBOL QTY</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "<code>/short BTCUSDT 0.01</code>\n"
        "<code>/short ETHUSDT 0.1</code>\n"
        "<code>/short SOLUSDT 1.0</code>\n\n"
        "<i>–†–µ–∂–∏–º: üü° –¢–ï–°–¢–û–í–´–ô (–æ—Ä–¥–µ—Ä–∞ –Ω–µ –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ –±–∏—Ä–∂–µ)</i>",
        parse_mode='HTML'
    )


@dp.message(F.text == "üîí CLOSE")
async def button_close(message: types.Message):
    await message.answer(
        "üîí <b>–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
        "–î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/close SYMBOL</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "<code>/close BTCUSDT</code>\n"
        "<code>/close ETHUSDT</code>\n"
        "<code>/close SOLUSDT</code>\n\n"
        "<i>–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ /long –∏–ª–∏ /short</i>",
        parse_mode='HTML'
    )


@dp.message(F.text == "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å")
async def button_portfolio(message: types.Message):
    try:
        portfolio = get_portfolio_summary()

        if portfolio['total_positions'] == 0:
            await message.answer(
                "üìä <b>–ü–æ—Ä—Ç—Ñ–µ–ª—å</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.\n\n"
                "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /long –∏–ª–∏ /short —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏–∏</i>",
                parse_mode='HTML'
            )
            return

        text = "üìä <b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å</b>\n\n"
        text += f"‚Ä¢ <b>–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π:</b> {portfolio['total_positions']}\n"
        text += f"‚Ä¢ <b>–û–±—â–∏–π PnL:</b> {portfolio['total_pnl']:.2f} USDT\n\n"

        text += "<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n"
        for pos in portfolio['positions']:
            emoji = "üìà" if pos['side'] == 'BUY' else "üìâ"
            pnl_emoji = "üü¢" if pos['pnl'] > 0 else "üî¥"
            text += f"\n{emoji} <b>{pos['symbol']}</b> {pos['side']}\n"
            text += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {pos['qty']}\n"
            text += f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {pos['entry_price']:.4f}\n"
            text += f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {pos['current_price']:.4f}\n"
            text += f"   {pnl_emoji} PnL: {pos['pnl']:.2f} USDT\n"
            text += f"   <code>/close {pos['symbol']}</code>\n"

        await message.answer(text, parse_mode='HTML')

    except Exception as e:
        logger.error(f"Portfolio error: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è</b>\n\n"
            f"<i>–î–µ—Ç–∞–ª–∏: {str(e)}</i>",
            parse_mode='HTML'
        )


@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def button_back_to_main(message: types.Message):
    await message.answer(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer(
        "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥",
        reply_markup=get_main_keyboard()
    )


async def check_signals(notify_user=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –≤—Å–µ–º –º–æ–Ω–µ—Ç–∞–º"""
    logger.info("üîç Scanning market for signals...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        best_signals = await scanner.get_best_signals(max_signals=5)

        if not best_signals:
            logger.info("No strong signals found in market scan")
            if notify_user:
                await bot.send_message(notify_user, "üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ã
        for i, signal_data in enumerate(best_signals, 1):
            symbol = signal_data['symbol']
            signal = signal_data['signal']
            strength = signal_data['strength']

            if signal.side != 'NONE':
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                log_signal(symbol, 'multi', signal.side, signal.entry, signal.stop,
                           signal.tp1, signal.tp2, signal.tp3)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                await notify_websocket_clients("new_signal", {
                    "symbol": symbol,
                    "side": signal.side,
                    "entry": signal.entry,
                    "confidence": signal.confidence,
                    "reason": signal.reason
                })

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                emoji = "üü¢" if signal.side == 'LONG' else "üî¥"
                strength_emoji = "üî•" * min(strength, 3)

                text = (
                    f"{strength_emoji} <b>–°–ò–ì–ù–ê–õ #{i}</b> {strength_emoji}\n\n"
                    f"‚Ä¢ <b>–ú–æ–Ω–µ—Ç–∞:</b> {symbol}\n"
                    f"‚Ä¢ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {emoji} {signal.side}\n"
                    f"‚Ä¢ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal.confidence:.1%}\n"
                    f"‚Ä¢ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {signal.entry:.4f}\n\n"
                    f"<b>üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã:</b>\n"
                    f"TP1: {signal.tp1:.4f}\n"
                    f"TP2: {signal.tp2:.4f}\n"
                    f"TP3: {signal.tp3:.4f}\n\n"
                    f"<b>üõë –°—Ç–æ–ø-–ª–æ—Å—Å:</b> {signal.stop:.4f}\n\n"
                    f"<i>{signal.reason}</i>"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞
                await bot.send_message(CHAT_ID, text, parse_mode='HTML')
                logger.info(f"Strong signal found: {symbol} {signal.side} (confidence: {signal.confidence:.1%})")

        # –ï—Å–ª–∏ —ç—Ç–æ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º summary
        if notify_user and len(best_signals) > 0:
            summary = f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(best_signals)}"
            await bot.send_message(notify_user, summary)

    except Exception as e:
        logger.error(f"Market scan error: {e}")
        if notify_user:
            await bot.send_message(notify_user, f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞: {str(e)}")


def get_signals(limit=100):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã"""
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("SELECT * FROM signals ORDER BY ts DESC LIMIT ?", (limit,))
    rows = c.fetchall()
    conn.close()

    signals = []
    for r in rows:
        signals.append({
            'id': r[0],
            'ts': r[1],
            'symbol': r[2],
            'timeframe': r[3],
            'side': r[4],
            'entry': r[5],
            'stop': r[6],
            'tp1': r[7],
            'tp2': r[8],
            'tp3': r[9]
        })
    return signals


# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
@scheduler.scheduled_job('interval', seconds=SIGNAL_INTERVAL)
async def scheduled_check():
    """–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        await check_signals()
    except Exception as e:
        logger.error(f"Scheduled check error: {e}")

# –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –¶–ï–ù
@scheduler.scheduled_job('interval', seconds=60)  # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
async def update_prices_job():
    """–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ"""
    try:
        await update_portfolio_prices()
    except Exception as e:
        logger.error(f"Price update job error: {e}")

# FastAPI webhook –¥–ª—è TradingView
@app.post('/tradingview')
async def tv_webhook(req: Request):
    try:
        payload = await req.json()
        symbol = payload.get('symbol')
        action = payload.get('action')
        amount = float(payload.get('amount', 0))

        if action in ('LONG', 'SHORT'):
            side = 'BUY' if action == 'LONG' else 'SELL'
            res = await place_market_order(symbol, side, amount)
            if res.success:
                log_trade(symbol, side, amount, 0.0)
                await bot.send_message(CHAT_ID, f'TradingView webhook executed: {action} {symbol} {amount}')
                return {'ok': True, 'info': res.info}
            return {'ok': False, 'error': res.info}
        elif action == 'CLOSE':
            await bot.send_message(CHAT_ID, f'TradingView webhook close requested: {symbol}')
            return {'ok': True, 'info': 'close_requested'}
        return {'ok': False, 'error': 'invalid action'}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {'ok': False, 'error': str(e)}


@app.get('/')
async def root():
    return {'status': 'Bot is running'}

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π scheduled_check)
@scheduler.scheduled_job('interval', seconds=60)  # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
async def update_prices_job():
    """–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ"""
    try:
        await update_portfolio_prices()
    except Exception as e:
        logger.error(f"Price update job error: {e}")

# API endpoints –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
@app.post("/api/scan")
async def api_scan():
    """API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞"""
    try:
        await check_signals()
        return {"status": "scan_started"}
    except Exception as e:
        logger.error(f"API scan error: {e}")
        return {"status": "error", "error": str(e)}

@app.post("/api/report")
async def api_report():
    """API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"""
    try:
        path = generate_weekly_report()
        return {"status": "report_generated", "path": path}
    except Exception as e:
        return {"status": "error", "error": str(e)}

@app.post("/api/signals/enable")
async def api_signals_enable():
    """API –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        if not scheduler.running:
            scheduler.start()
        scheduler.resume()
        return {"status": "signals_enabled"}
    except Exception as e:
        return {"status": "error", "error": str(e)}

@app.post("/api/signals/disable")
async def api_signals_disable():
    """API –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        scheduler.pause()
        return {"status": "signals_disabled"}
    except Exception as e:
        return {"status": "error", "error": str(e)}

@app.get("/api/status")
async def api_status():
    """API —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    try:
        from db import get_portfolio_summary
        portfolio = get_portfolio_summary()
        return {
            "status": "running",
            "open_positions": portfolio['total_positions'],
            "total_pnl": portfolio['total_pnl']
        }
    except Exception as e:
        return {"status": "error", "error": str(e)}

def start_uvicorn():
    """–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
    uvicorn.run(app, host='0.0.0.0', port=8000, log_level="info")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        init_db()
        logger.info("Database initialized")

        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler.start()
        logger.info("Scheduler started")

        # –ó–∞–ø—É—Å–∫ FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        t = threading.Thread(target=start_uvicorn, daemon=True)
        t.start()
        logger.info("FastAPI server started on http://0.0.0.0:8000")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await bot.send_message(
            CHAT_ID,
            "ü§ñ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )

        logger.info("Bot started successfully!")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await bot.send_message(CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")
        except:
            pass
        raise


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot crashed: {e}")